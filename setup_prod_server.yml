---
- name: Setup Server
  hosts: servers
  become: true
  tasks:
    - name: Check if Docker is installed
      command: which docker
      register: docker_check
      ignore_errors: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - python3-docker
        state: present
        update_cache: true
      when: docker_check.rc != 0

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: docker_check.rc != 0

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
      when: docker_check.rc != 0

    - name: Update apt and install docker-ce
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true
      when: docker_check.rc != 0

    - name: Install Docker Module for Python (using apt instead of pip)
      apt:
        name: python3-docker
        state: present
      when: docker_check.rc != 0

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: true
      when: docker_check.rc != 0
      
    - name: Check if containers directory exists
      stat:
        path: /opt/containers
      register: containers_dir

    - name: Create containers directory
      file:
        path: /opt/containers
        state: directory
        mode: '0755'
      when: not containers_dir.stat.exists

    - name: Create container subdirectories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /opt/containers/traefik
        - /opt/containers/portainer
      when: not containers_dir.stat.exists

    - name: Copy and process Traefik compose file
      template:
        src: containers/traefik/compose.yml
        dest: /opt/containers/traefik/compose.yml
        mode: '0755'

    - name: Copy and process Portainer compose file
      template:
        src: containers/portainer/compose.yml
        dest: /opt/containers/portainer/compose.yml
        mode: '0755'

    - name: Create letsencrypt directory for Traefik
      file:
        path: /opt/containers/traefik/letsencrypt
        state: directory
        mode: '0755'
      when: not containers_dir.stat.exists

    - name: Create Docker network colvert
      docker_network:
        name: colvert
        state: present
        driver: bridge

    - name: Start Traefik container
      community.docker.docker_compose_v2:
        project_src: /opt/containers/traefik
        state: present
        build: never
        remove_orphans: yes
      register: traefik_output

    - name: Show Traefik deployment results
      ansible.builtin.debug:
        var: traefik_output

    - name: Start Portainer container
      community.docker.docker_compose_v2:
        project_src: /opt/containers/portainer
        state: present
        build: never
        remove_orphans: yes
      register: portainer_output

    - name: Show Portainer deployment results
      ansible.builtin.debug:
        var: portainer_output

    - name: Verify that Traefik service is running
      ansible.builtin.assert:
        that:
          - traefik_container.State == 'running'
      vars:
        traefik_container: >-
          {{ traefik_output.containers | selectattr("Service", "equalto", "traefik") | first }}
      ignore_errors: yes

    - name: Verify that Portainer agent service is running
      ansible.builtin.assert:
        that:
          - portainer_agent_container.State == 'running'
      vars:
        portainer_agent_container: >-
          {{ portainer_output.containers | selectattr("Service", "equalto", "portainer-agent") | first }}
      ignore_errors: yes